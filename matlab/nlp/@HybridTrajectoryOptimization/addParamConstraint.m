function obj = addParamConstraint(obj, phase)
    % Add parameter consistency constraints within the phase 
    %
    %
    % Parameters:
    % phase: the index of the phase (domain) @type integer
    
    % extract phase information
    phase_idx = getPhaseIndex(obj, phase);
    phase_info = obj.Phase{phase_idx};
    phase_funcs = obj.Funcs.Phase{phase_idx};
    
    % local variable for fast access
    n_node = phase_info.NumNode;
    var_table= phase_info.OptVarTable;
    col_names = phase_info.ConstrTable.Properties.VariableNames;
    
    
    if ~isempty(phase_info.Domain.DesVelocityOutput)
        v_cont = repmat({{}},1, n_node);
    end
    p_cont = repmat({{}},1, n_node);
    a_cont = repmat({{}},1, n_node);
    t_cont = repmat({{}},1, n_node);
    h_cont = repmat({{}},1, n_node);
    % domain admissible constraints are enforced at all nodes except the
    % last node
    node_list = 1:(n_node-1);
    
    for i=node_list
        %% parameters of velocity outputs
        if ~isempty(phase_info.Domain.DesVelocityOutput)
            v_cont{i} = {NlpFunction('Name','vCont',...
                'Dimension',phase_info.Domain.DesVelocityOutput.NumParam, ...
                'Type', 'linear', 'lb',0,'ub',0, ...
                'DepVariables',{{var_table{'V',i}{1},var_table{'V',i+1}{1}}},...
                'Funcs', phase_funcs.vCont.Funcs)};
        end
        
        %% phase variable parameters
        p_cont{i} = {NlpFunction('Name','pCont',...
            'Dimension',phase_info.Domain.PhaseVariable.Var.Parameters.Dimension, ...
            'Type', 'linear','lb',0,'ub',0,...
            'DepVariables', {{var_table{'P',i}{1},var_table{'P',i+1}{1}}},...
            'Funcs', phase_funcs.pCont.Funcs)};
        
        %% parameters of position outputs
        num_param = phase_info.Domain.DesPositionOutput.NumParam * ...
            length(phase_info.Domain.ActPositionOutput.KinGroupTable);
        a_cont{i} = {NlpFunction('Name','aCont',...
            'Dimension',num_param, 'Type', 'linear',...
            'lb',0,'ub',0,...
            'DepVariables', {{var_table{'A',i}{1},var_table{'A',i+1}{1}}},...
            'Funcs', phase_funcs.aCont.Funcs)};
        
        %% time
        t_cont{i} = {NlpFunction('Name','tCont',...
            'Dimension',1, 'Type', 'linear',...
            'lb',0,'ub',0,...
            'DepVariables', {{var_table{'T',i}{1},var_table{'T',i+1}{1}}},...
            'Funcs', obj.Funcs.Generic.tCont.Funcs)};
        
        %% hbar
        h_cont{i} = {NlpFunction('Name','hCont',...
            'Dimension',getDimension(phase_info.Domain.HolonomicConstr), 'Type', 'linear',...
            'lb',0,'ub',0,...
            'DepVariables', {{var_table{'H',i}{1},var_table{'H',i+1}{1}}},...
            'Funcs', phase_funcs.hCont.Funcs)};
    end
    
    obj.Phase{phase_idx}.ConstrTable = [...
        obj.Phase{phase_idx}.ConstrTable;...
        cell2table(v_cont,'RowNames',{'vCont'},'VariableNames',col_names);...
        cell2table(p_cont,'RowNames',{'pCont'},'VariableNames',col_names);...
        cell2table(a_cont,'RowNames',{'aCont'},'VariableNames',col_names);...
        cell2table(t_cont,'RowNames',{'tCont'},'VariableNames',col_names);...        
        cell2table(h_cont,'RowNames',{'hCont'},'VariableNames',col_names)];

end