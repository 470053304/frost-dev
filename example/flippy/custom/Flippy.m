classdef Flippy < RigidBodyModel
    %FLIPPY Model
    
    properties
%         % contact points ignored for now
%         %
        % @type struct
        Contacts
%         
        % Fixed joints specified in URDF file as ''fixed''.
        % 
        % Fixed joints will be enforced via holonomic constraints 
        %
        % @type struct
        FixedDofs
        
        
        % All kinematic functions will be used in the formulation of
        % virtual constraints. 
        %
        % @type struct
        KinObjects
        
        
        
    end
    
    methods
        

        function obj = FlippyContactPoints(obj)
            % define all possible contact points
                       
            % friction coefficient
            mu = 0.5;
            
            % potential contact points
            contacts = struct();

            %% end effector
            contacts.EndEff = KinematicContact('Name','EndEff');
            contacts.EndEff.ParentLink = 'wrist_3_link';
            contacts.EndEff.Offset = [0.0, 0, 0];
            contacts.EndEff.NormalAxis = 'z';
            contacts.EndEff.ContactType = 'PlanarContactWithFriction';
            contacts.EndEff.ModelType = obj.Type;
            contacts.EndEff.Mu = mu;
            
            contacts.Base = KinematicContact('Name','Base');
            contacts.Base.ParentLink = 'base_link';
            contacts.Base.Offset = [0.0, 0, 0];
            contacts.Base.NormalAxis = 'z';
            contacts.Base.ContactType = 'PlanarContactWithFriction';
            contacts.Base.ModelType = obj.Type;
            contacts.Base.Geometry = {'x',[1/2,1/2];'y',[1/2,1/2]};
            contacts.Base.Mu = mu;

            obj.Contacts = contacts;
        end
        
        
        function obj = PositionKinemticFunction(obj)
            
            if isempty(obj.KinObjects)
                obj.KinObjects = struct;
            end
            
            % create 3 kinematic position (x,y,z) objects for each contact
            % point
            contacts = obj.Contacts;
            points = fields(contacts);
            
            for i=1:length(points)
                contact_point = points{i};
                
                obj.KinObjects.([contact_point,'PosX']) = ...
                    KinematicPosition('Name', [contacts.(contact_point).Name,'PosX'],...
                    'ParentLink',contacts.(contact_point).ParentLink,...
                    'Axis','x',...
                    'Offset',contacts.(contact_point).Offset);
                
                obj.KinObjects.([contact_point,'PosY']) = ...
                    KinematicPosition('Name', [contacts.(contact_point).Name,'PosY'],...
                    'ParentLink',contacts.(contact_point).ParentLink,...
                    'Axis','y',...
                    'Offset',contacts.(contact_point).Offset);
                
                obj.KinObjects.([contact_point,'PosZ']) = ...
                    KinematicPosition('Name', [contacts.(contact_point).Name,'PosZ'],...
                    'ParentLink',contacts.(contact_point).ParentLink,...
                    'Axis','z',...
                    'Offset',contacts.(contact_point).Offset);
            end
            %% Other Positions
            
            obj.KinObjects.ShoulderPanPosX = KinematicPosition('Name', 'ShoulderPanPosX',...
                'ParentLink','base_link',...
                'Axis','x',...
                'Offset',[0,0,0]);
            obj.KinObjects.ShoulderPanPosY = KinematicPosition('Name', 'ShoulderPanPosY',...
                'ParentLink','base_link',...
                'Axis','y',...
                'Offset',[0,0,0]);
            obj.KinObjects.ShoulderPanPosZ = KinematicPosition('Name', 'ShoulderPanPosZ',...
                'ParentLink','base_link',...
                'Axis','z',...
                'Offset',[0,0,0]);
            obj.KinObjects.ShoulderLiftPosX = KinematicPosition('Name', 'ShoulderLiftPosX',...
                'ParentLink','shoulder_link',...
                'Axis','x',...
                'Offset',[0,0,0]);
            obj.KinObjects.ShoulderLiftPosY = KinematicPosition('Name', 'ShoulderLiftPosY',...
                'ParentLink','shoulder_link',...
                'Axis','y',...
                'Offset',[0,0,0]);
            obj.KinObjects.ShoulderLiftPosZ = KinematicPosition('Name', 'ShoulderLiftPosZ',...
                'ParentLink','shoulder_link',...
                'Axis','z',...
                'Offset',[0,0,0]);  
            obj.KinObjects.ElbowPosX = KinematicPosition('Name', 'ElbowPosX',...
                'ParentLink','upper_arm_link',...
                'Axis','x',...
                'Offset',[0,0,0]);
            obj.KinObjects.ElbowPosY = KinematicPosition('Name', 'ElbowPosY',...
                'ParentLink','upper_arm_link',...
                'Axis','y',...
                'Offset',[0,0,0]);
            obj.KinObjects.ElbowPosZ = KinematicPosition('Name', 'ElbowPosZ',...
                'ParentLink','upper_arm_link',...
                'Axis','z',...
                'Offset',[0,0,0]);  
            obj.KinObjects.WristOnePosX = KinematicPosition('Name', 'WristOnePosX',...
                'ParentLink','forearm_link',...
                'Axis','x',...
                'Offset',[0,0,0]);
            obj.KinObjects.WristOnePosY = KinematicPosition('Name', 'WristOnePosY',...
                'ParentLink','forearm_link',...
                'Axis','y',...
                'Offset',[0,0,0]);
            obj.KinObjects.WristOnePosZ = KinematicPosition('Name', 'WristOnePosZ',...
                'ParentLink','forearm_link',...
                'Axis','z',...
                'Offset',[0,0,0]);  
            obj.KinObjects.WristTwoPosX = KinematicPosition('Name', 'WristTwoPosX',...
                'ParentLink','wrist_1_link',...
                'Axis','x',...
                'Offset',[0,0,0]);
            obj.KinObjects.WristTwoPosY = KinematicPosition('Name', 'WristTwoPosY',...
                'ParentLink','wrist_1_link',...
                'Axis','y',...
                'Offset',[0,0,0]);
            obj.KinObjects.WristTwoPosZ = KinematicPosition('Name', 'WristTwoPosZ',...
                'ParentLink','wrist_1_link',...
                'Axis','z',...
                'Offset',[0,0,0]); 
            obj.KinObjects.WristThreePosX = KinematicPosition('Name', 'WristThreePosX',...
                'ParentLink','wrist_2_link',...
                'Axis','x',...
                'Offset',[0,0,0]);
            obj.KinObjects.WristThreePosY = KinematicPosition('Name', 'WristThreePosY',...
                'ParentLink','wrist_2_link',...
                'Axis','y',...
                'Offset',[0,0,0]);
            obj.KinObjects.WristThreePosZ = KinematicPosition('Name', 'WristThreePosZ',...
                'ParentLink','wrist_2_link',...
                'Axis','z',...
                'Offset',[0,0,0]); 
           
            obj.KinObjects.WristThreeLeftOffsetZ = KinematicPosition('Name', 'WristThreeLeftOffset',...
                'ParentLink','wrist_2_link',...
                'Axis','z',...
                'Offset',[0,0.2,0]); 
           
            obj.KinObjects.WristThreeRightOffsetZ = KinematicPosition('Name', 'WristThreeRightOffset',...
                'ParentLink','wrist_2_link',...
                'Axis','z',...
                'Offset',[0,-0.2,0]); 
            
            obj.KinObjects.WristThreeFrontOffsetZ = KinematicPosition('Name', 'WristThreeFrontOffsetZ',...
                'ParentLink','wrist_2_link',...
                'Axis','z',...
                'Offset',[0.2,0,0]); 
           
            obj.KinObjects.WristThreeBackOffsetZ = KinematicPosition('Name', 'WristThreeBackOffsetZ',...
                'ParentLink','wrist_2_link',...
                'Axis','z',...
                'Offset',[-0.2,0,0]); 
            
        end
        
        function obj = JointKinemticFunction(obj)
            % construct potentially useful kinematic object of the robot
            
            if isempty(obj.KinObjects)
                obj.KinObjects = struct;
            end
            
            %% DoFs
            % Make joints as a KinematicDof object
            obj.KinObjects.ShoulderPan = KinematicDof('Name','ShoulderPan',...
                'DofName','shoulder_pan_joint');
            
            obj.KinObjects.ShoulderLift = KinematicDof('Name','ShoulderLift',...
                'DofName','shoulder_lift_joint');
            
            obj.KinObjects.Elbow = KinematicDof('Name','Elbow',...
                'DofName','elbow_joint');
            
            obj.KinObjects.WristPitch = KinematicDof('Name','WristPitch',...
                'DofName','wrist_1_joint');
            
            obj.KinObjects.WristYaw = KinematicDof('Name','WristYaw',...
                'DofName','wrist_2_joint');
            
            obj.KinObjects.WristRoll = KinematicDof('Name','WristRoll',...
                'DofName','wrist_3_joint');
            
            
        end
        
        function obj = CompositeKinematicFunction(obj)
            % Kinematic functions composed of multiple kinematic functions
            
            if isempty(obj.KinObjects)
                obj.KinObjects = struct;
            end
            
            %% velocity outputs
            obj.KinObjects.DeltaPan = KinematicExpr('Name', 'DeltaPan',...
                'Linearize', false,...
                'Dependents', {{obj.KinObjects.WristRoll}},...
                'Expression', '(WristRoll - 0.0)');
            
            
            %% phase variables

            obj.KinObjects.Tau = KinematicExpr('Name', 'Tau');
            obj.KinObjects.Tau.Dependents = {obj.KinObjects.WristRoll};
            obj.KinObjects.Tau.Expression = '(WristRoll - p[2])/(p[1] - p[2])';
            obj.KinObjects.Tau.Parameters = struct('Name','p','Dimension',2);
            
            obj.KinObjects.DeltaFinal = KinematicExpr('Name', 'DeltaFinal');
            obj.KinObjects.DeltaFinal.Dependents = {obj.KinObjects.WristRoll};
            obj.KinObjects.DeltaFinal.Expression = '(WristRoll - Pi)';
            
            %% position outputs
              
            obj.KinObjects.EndEffHeight = KinematicExpr('Name', 'EndEffHeight',...
                'Linearize', false,...
                'Dependents',{{obj.KinObjects.EndEffPosZ}},...
                'Expression','EndEffPosZ - 1.0');
                
            
        end
        
        function obj = Flippy(urdf)
            
            BaseDof = struct;
            BaseDof.type = 'floating';
            BaseDof.lower = [0, 0, 1, 0, 0, 0];
            BaseDof.upper =  [0, 0, 1, 0, 0, 0];
            BaseDof.minVelocity =  [0, 0, 0, 0, 0, 0];
            BaseDof.maxVelocity =  [0, 0, 0, 0, 0, 0];
            
            
            obj = obj@RigidBodyModel(urdf,BaseDof,'spatial');
            
            obj = FlippyContactPoints(obj);
            
            fixed_joints = obj.Dof(strcmp('fixed',{obj.Dof.type}));
            obj.FixedDofs = cell(1, numel(fixed_joints));
            for i=1:numel(fixed_joints)
                obj.FixedDofs{i} = KinematicDof('Name',regexprep(fixed_joints(i).name,'_',''),...
                    'DofName',fixed_joints(i).name);                
            end
            
            
            obj = JointKinemticFunction(obj);
            
            obj = PositionKinemticFunction(obj);
            
            obj = CompositeKinematicFunction(obj);
            
            
            obj = FlippyAnimation(obj);
            
            
            
            
            
        end
        
        function obj = FlippyAnimation(obj)
            
            
            kin = obj.KinObjects;
            
            
            ur5_arm = KinematicGroup('Name', 'UR5Arm', 'AllowDuplicate', true);
            ur5_arm = ur5_arm.addKinematic(...
                {kin.ShoulderPanPosX,kin.ShoulderPanPosY,kin.ShoulderPanPosZ,...
                kin.ShoulderLiftPosX,kin.ShoulderLiftPosY,kin.ShoulderLiftPosZ,...
                kin.ElbowPosX,kin.ElbowPosY,kin.ElbowPosZ,...
                kin.WristOnePosX,kin.WristOnePosY,kin.WristOnePosZ,...
                kin.WristTwoPosX,kin.WristTwoPosY,kin.WristTwoPosZ,...
                kin.WristThreePosX,kin.WristThreePosY,kin.WristThreePosZ});
            line_objects(1).Kin = ur5_arm;
            line_objects(1).Color = 'r';
            line_objects(1).Style = '-o';
            line_objects(1).LineWidth = 6;
            line_objects(1).MarkerSize = 4;
            line_objects(1).NumPoint = 6;
            
                        
            obj.LineObjects = line_objects;
        end
    end
    
end

